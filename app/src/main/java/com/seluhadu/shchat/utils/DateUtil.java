package com.seluhadu.shchat.utils;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Locale;public class DateUtil {    private DateUtil() {    }    public static String formatTime(long timeInMillis) {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("h:mm", Locale.getDefault());        return simpleDateFormat.format(timeInMillis);    }    public static String formatTimeWithMarker(long timeInMillis) {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("h:mm a", Locale.getDefault());        return simpleDateFormat.format(timeInMillis);    }    public static int getHourOfDay(long timeInMillis) {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("H", Locale.getDefault());        return Integer.valueOf(simpleDateFormat.format(timeInMillis));    }    public static int getMinute(long timeInMillis) {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("m", Locale.getDefault());        return Integer.valueOf(simpleDateFormat.format(timeInMillis));    }    public static String formatDateTime(long timeInMillis) {        if (isToday(timeInMillis)) {            return "Today " + formatTime(timeInMillis);        } else {            return formatDate(timeInMillis);        }    }    public static String formatDate(long timeInMillis) {        SimpleDateFormat sdf = new SimpleDateFormat("MMMM dd", Locale.getDefault());        return sdf.format(timeInMillis);    }    public static boolean isToday(long timeInMillis) {        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd", Locale.getDefault());        String date = sdf.format(timeInMillis);        return date.equals(sdf.format(System.currentTimeMillis()));    }    public static boolean hasSameDate(long timeFirst, long timeSecond) {        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd", Locale.getDefault());        return sdf.format(timeFirst).equals(sdf.format(timeSecond));    }    public static boolean getDifferentTime(long timeInMillis) {        return true;    }    public static long diff(long time, int field) {        long fieldTime = getFieldInMillis(field);        Calendar cal = Calendar.getInstance();        long now = cal.getTimeInMillis();        return (time / fieldTime - now / fieldTime);    }    private static long getFieldInMillis(int field) {        // TODO cache values        final Calendar cal = Calendar.getInstance();        long now = cal.getTimeInMillis();        cal.add(field, 1);        long after = cal.getTimeInMillis();        return after - now;    }}